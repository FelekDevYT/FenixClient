package net.felsstudio.fenix.module.EXPLOIT;

import net.felsstudio.fenix.ExampleMod;
import net.felsstudio.fenix.module.Module;
import net.felsstudio.fenix.utils.RenderUtils;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import net.minecraft.client.renderer.culling.Frustum;
import net.minecraft.client.renderer.culling.ICamera;
import net.minecraft.network.play.server.SPacketChunkData;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.lwjgl.input.Keyboard;
import net.felsstudio.clickgui.Setting;

import java.util.ArrayList;
import java.util.List;

public class NewChunks extends Module {

    private final ICamera frustum = new Frustum();
    private final List<ChunkData> chunkDataList = new ArrayList<>();

    public NewChunks() {
        super("NewChunks", Keyboard.KEY_NONE, Category.EXPLOIT);

        ExampleMod.instance.settingsManager.rSetting(new Setting("Render", this, true));
    }

    @SubscribeEvent
    public void onPacketReceived(RenderWorldLastEvent event) {
        if (toggled && mc.player != null && mc.world != null) {
            if (mc.getConnection() != null && mc.getConnection().getNetworkManager() != null) {
                mc.getConnection().getNetworkManager().channel().pipeline().addFirst(new SimpleChannelInboundHandler<SPacketChunkData>() {
                    @Override
                    protected void channelRead0(ChannelHandlerContext ctx, SPacketChunkData packet) {
                        if (!packet.isFullChunk()) {
                            ChunkData chunk = new ChunkData(packet.getChunkX() * 16, packet.getChunkZ() * 16);

                            if (!chunkDataList.contains(chunk)) {
                                chunkDataList.add(chunk);
                            }
                        }
                        ctx.fireChannelRead(packet);
                    }
                });
            }
        }
    }

    @SubscribeEvent
    public void onRender(RenderWorldLastEvent event) {
        if (toggled && ExampleMod.instance.settingsManager.getSettingByName(this.name, "Render").getValBoolean()) {
            if (mc.getRenderManager() == null) return;

            for (ChunkData chunkData : new ArrayList<>(chunkDataList)) {
                if (chunkData != null) {
                    frustum.setPosition(mc.getRenderViewEntity().posX, mc.getRenderViewEntity().posY, mc.getRenderViewEntity().posZ);

                    AxisAlignedBB bb = new AxisAlignedBB(chunkData.x, 0, chunkData.z, chunkData.x + 16, 1, chunkData.z + 16);

                    if (frustum.isBoundingBoxInFrustum(bb)) {
                        RenderUtils.drawPlane(chunkData.x - mc.getRenderManager().viewerPosX, -mc.getRenderManager().viewerPosY,
                                chunkData.z - mc.getRenderManager().viewerPosZ, new AxisAlignedBB(0, 0, 0, 16, 1, 16), 1, 0xFF9900EE);
                    }
                }
            }
        }
    }

    public static class ChunkData {
        private int x;
        private int z;

        public ChunkData(int x, int z) {
            this.x = x;
            this.z = z;
        }

        public int getX() {
            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getZ() {
            return z;
        }

        public void setZ(int z) {
            this.z = z;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj instanceof ChunkData) {
                ChunkData other = (ChunkData) obj;
                return this.x == other.x && this.z == other.z;
            }
            return false;
        }
    }
}